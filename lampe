#!/bin/bash
# interactive bash script to control up to 9 hue lamps
# by Andre Klausnitzer (poinck)

readKey() {
    # Wait for first char
    if read -s -n 1 _KEY; then
      	# Read rest of chars
      	while read -s -N 1 -t 0.001 ; do # FIXME is there a timeout-problem? 
      		_KEY+="${REPLY}"
      	done
    fi
}

declare _SELECTED_LAMP=1 # defaults to first lamp
declare _LAST_LAMP=51

readAKey() {
	# readKey
	read -s -n 1 _KEY

	# XXX   catch cursor keys without modifiers (removed)
	# catch WASD for basic stuff
	case $_KEY in
		# $'\e[A' |
		"w")
			_UP=1
		;;
		# $'\e[B' |
		"s")
			_DOWN=1
		;;
		# $'\e[C' |
		"d")
			_RIGHT=1
		;;
		# $'\e[D' |
		"a")
			_LEFT=1
		;;
		"q")
			# hue
			_Q=1
		;;
		"e")
			# hue
			_E=1
		;;
		"h")
			# help
			_H=1
		;;
		"z")
			# color-selection with zenity
			_Z=1
		;;
		[1-9])
			# select the current lamp
			_SELECTED_LAMP=$_KEY
			_NEW_LAMP=$_KEY
		;;
	esac
}

# init brightness
declare -a _BRIGHTNESS
for (( b=1 ; b<10 ; b=b+1 )) ; do 
	_BRIGHTNESS[$b]=32
done

# init saturation
declare -a _SAT
for (( s=1 ; s<10 ; s=s+1 )) ; do 
	_SAT[$s]=192
done

# init switch
declare -a _SWITCH # on or off
for (( s=1 ; s<10 ; s=s+1 )) ; do 
	_SWITCH[$s]="true"
done

# init color
declare -a _COLOR 
for (( s=1 ; s<10 ; s=s+1 )) ; do 
	_COLOR[$s]=12000 # orange
done

setBrightness() {
	brightness=${_BRIGHTNESS[$_SELECTED_LAMP]}
	
	brightness=$((brightness+$1))
	if [ $brightness -lt 1 ] ; then
		# switch off lamp
		setSwitch 0
		brightness=0
	elif [ $brightness -gt 0 ] ; then
		# switch on lamp
		setSwitch 1
		if [ $brightness -gt 254 ] ; then
			brightness=254
		fi
	fi

	_BRIGHTNESS[$_SELECTED_LAMP]=$brightness

	# debug
	# echo -n "param = $1 "
	# echo "brightness = ${_BRIGHTNESS[$_SELECTED_LAMP]} "
} 

setSat() {
	sat=${_SAT[$_SELECTED_LAMP]}
	
	sat=$((sat+$1))
	if [ $sat -lt 1 ] ; then
		sat=1
	elif [ $sat -gt 254 ] ; then
		sat=254
	fi

	_SAT[$_SELECTED_LAMP]=$sat
}

setColor() {
	hue=${_COLOR[$_SELECTED_LAMP]}
	
	hue=$((hue+$1))
	if [ $hue -lt 1 ] ; then
		hue=1
	elif [ $hue -gt 65280 ] ; then
		hue=65279
	fi

	# debug
	# echo " $hue "

	_COLOR[$_SELECTED_LAMP]=$hue
} 

setSwitch() {
	# debug
	# echo -n $1

	if [ "$1" == 1 ] ; then 
		_SWITCH[$_SELECTED_LAMP]="true"
	else
		_SWITCH[$_SELECTED_LAMP]="false"
	fi
}

# get colorEscapes from colors
lColor() {
	case $1 in
		"red")
			echo -en "\e[0;31m"
		;;
		"yellow")
			echo -en "\e[0;33m"
		;;
		"green")
			echo -en "\e[0;32m"
		;;
		"blue")
			echo -en "\e[0;34m"
		;;
		"magenta")
			echo -en "\e[0;35m"
		;;
		"white")
			echo -en "\e[0;37m"
		;;
		"ltred")
			echo -en "\e[1;31m"
		;;
		"ltyellow")
			echo -en "\e[1;33m"
		;;
		"ltgreen")
			echo -en "\e[1;32m"
		;;
		"ltblue")
			echo -en "\e[1;34m"
		;;
		"ltmagenta")
			echo -en "\e[1;35m"
		;;
		"ltwhite")
			echo -en "\e[1;37m"
		;;
		"off")
			echo -en "\e[0m"
		;;
	esac
}

getColorByValue() {
	hue=$1

	if [ $hue -lt 9001 ] ; then
		# red
		colorEscape="red"
	elif [ $hue -gt 9000 ] && [ $hue -lt 19001 ] ; then
		# orange, yellow
		colorEscape="yellow"
	elif [ $hue -gt 19000 ] && [ $hue -lt 31001 ] ; then
		# green
		colorEscape="green"
	elif [ $hue -gt 31000 ] && [ $hue -lt 35001 ] ; then
		# white, green-blue
		colorEscape="white"
	elif [ $hue -gt 35000 ] && [ $hue -lt 48001 ] ; then
		# blue
		colorEscape="blue"
	elif [ $hue -gt 48000 ] && [ $hue -lt 63279 ] ; then
		# purple
		colorEscape="magenta"
	elif [ $hue -gt 63279 ] ; then
		# red
		colorEscape="red"
	fi
	echo -en "$(lColor $colorEscape)"
}

# get color by color of selected lamp
getColor() {
	hue=${_COLOR[$_SELECTED_LAMP]}

	bold=""
	if [ ${_SWITCH[$_SELECTED_LAMP]} = "true" ] ; then
		bold="lt"
	fi
	if [ $hue -lt 9001 ] ; then
		# red
		colorEscape="red"
	elif [ $hue -gt 9000 ] && [ $hue -lt 19001 ] ; then
		# orange, yellow
		colorEscape="yellow"
	elif [ $hue -gt 19000 ] && [ $hue -lt 31001 ] ; then
		# green
		colorEscape="green"
	elif [ $hue -gt 31000 ] && [ $hue -lt 35001 ] ; then
		# white, green-blue
		colorEscape="white"
	elif [ $hue -gt 35000 ] && [ $hue -lt 48001 ] ; then
		# blue
		colorEscape="blue"
	elif [ $hue -gt 48000 ] && [ $hue -lt 63279 ] ; then
		# purple
		colorEscape="magenta"
	elif [ $hue -gt 63279 ] ; then
		# red
		colorEscape="red"
	fi
	echo -en "$(lColor $bold$colorEscape)"
}

printMainScreen() {
	currentBrightness=$((_BRIGHTNESS[_SELECTED_LAMP]/5))
	currentSat=$((_SAT[_SELECTED_LAMP]*currentBrightness/254))
	colorPosition=$((_COLOR[_SELECTED_LAMP]*currentBrightness/65279))
	if [ $colorPosition -gt 1 ] ; then
		colorPosition=$((colorPosition-1))
	fi

	# debug
	# echo "$colorPosition"

	echo -en "    \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b"
	echo -en " $(getColor)$_SELECTED_LAMP $(lColor ltwhite)[$(lColor off)"
	for (( ii=0 ; ii<currentBrightness ; ii=ii+1 )) ; do 
		colorValue=$((65279*ii/currentBrightness))
		echo -en "$(getColorByValue $colorValue)"

		if [ $ii -lt $currentSat ] ; then
			if [ $ii == $colorPosition ] ; then
				echo -en "$(getColor)C$(lColor off)"
			else
				echo -n "="
			fi
		else
			if [ $ii == $colorPosition ] ; then
				echo -en "$(getColor)C$(lColor off)"
			else
				echo -n "-"
			fi
		fi
	done
	for (( ii=0 ; ii<50-currentBrightness ; ii=ii+1 )) ; do
		echo -n " "
	done
	echo -en "$(lColor ltwhite)]$(lColor off) "
	if [ ${_SWITCH[$_SELECTED_LAMP]} != "true" ] ; then
		echo -n "off "
	else
		echo -n "    "
	fi
}

toggleSwitch() {
	if [ ${_SWITCH[$_SELECTED_LAMP]} = "true" ] ; then
		setSwitch 0
	else 
		setSwitch 1
	fi
}

printHelpScreen() {
	echo ""
	echo "      w,s   BRIGHTNESS   -"
	echo "      a,d   SATURATION   ="
	echo "      q,e   COLOR        C"
	echo "      1..9  LAMP"
	echo "      z     ZENITY"
}

lampeMain() {
	# initial screen
	echo -en "   [$(lColor red)=$(lColor yellow)=$(lColor green)=$(lColor white)=$(lColor blue)=$(lColor magenta)=$(lColor ltwhite)--PRESS-h-FOR-HELP--------------------------$(lColor off)]"

	lastTime=$(date +%s%3N) # seconds + milliseconds
	while true; do
		# main loop

		# initialize global keys
		_UP=0
		_DOWN=0
		_RIGHT=0
		_LEFT=0
		_NEW_LAMP=51;
		_Q=0
		_E=0
		_H=0
		_Z=0

		readAKey

		# handle brightness and saturation
		if [ $_UP == 1 ] ; then
			setBrightness 5
		fi
		if [ $_DOWN == 1 ] ; then
			setBrightness -5
		fi
		if [ $_RIGHT == 1 ] ; then
			setSat 10
		fi
		if [ $_LEFT == 1 ] ; then
			setSat -10
		fi
		if [ $_Q == 1 ] ; then
			# hue
			setColor -1000
		fi
		if [ $_E == 1 ] ; then
			# hue
			setColor 1000
		fi
		if [ $_H == 1 ] ; then
			printHelpScreen
		fi
		if [ $_Z == 1 ] ; then
			lampeZenityColor $_SELECTED_LAMP
		fi

		# toggle switch
		if [ $_NEW_LAMP -lt 51 ] ; then
			# debug
			# echo "NL$_NEW_LAMP LL$_LAST_LAMP "

			if [ $_LAST_LAMP == $_NEW_LAMP ] ; then
				toggleSwitch
				toggle=1
			else
				toggle=0
			fi
			_LAST_LAMP=$_NEW_LAMP
		else
			_LAST_LAMP=51
			toggle=0
		fi

		# FIXME is this workarround still needed?
		if [ ${_SAT[$_SELECTED_LAMP]} -lt 1 ] ; then
			_SAT[$_SELECTED_LAMP]=1
		fi

		printMainScreen
	
		hbSendLampState
	done
}

# send lamp state (switch and color) to Hue Bridge
hbSendLampState() {
	color="\"hue\":${_COLOR[$_SELECTED_LAMP]},\"bri\":${_BRIGHTNESS[$_SELECTED_LAMP]},\"sat\":${_SAT[$_SELECTED_LAMP]}"
	thisTime=$(date +%s%3N)
	diffTime=$((thisTime-lastTime))
	if [ $diffTime -gt 250 ] || [ $toggle == 1 ] ; then
		# only send new state every 250ms
		curl -s -d "{\"on\":${_SWITCH[$_SELECTED_LAMP]},$color}" -X PUT "http://$bridgeip/api/newdeveloper/lights/$_SELECTED_LAMP/state" -m 1 > /dev/null
		lastTime=$(date +%s%3N)
	fi
}

fEval() {
	# taken from http://www.linuxjournal.com/content/floating-point-math-bash, 
	# by Mitch Frazier

    local stat=0
    local result=0.0
    if [[ $# -gt 0 ]]; then
        result=$(echo "$fScale $*" | bc -q 2> /dev/null)
        stat=$?
        if [[ $stat -eq 0  &&  -z "$result" ]]; then stat=1; fi
    fi
    echo $result
    return $stat
}

fCond() {
	# taken from http://www.linuxjournal.com/content/floating-point-math-bash
	# by Mitch Frazier

    local cond=0
    if [[ $# -gt 0 ]]; then
        cond=$(echo "$*" | bc -q 2> /dev/null)
        if [[ -z "$cond" ]]; then cond=0; fi
        if [[ "$cond" != 0  &&  "$cond" != 1 ]]; then cond=0; fi
    fi
    local stat=$((cond == 0))
    return $stat
}

# convert RGB color to HSB/HSV color
# implementation ported from python2.7 colorsys.rgb_to_hsv()
rgbToHSB() {
	fScale="scale=5;"
	r=$(fEval "$1 / 255")
	g=$(fEval "$2 / 255")
	b=$(fEval "$3 / 255")

	# debug
	# echo "r = $r"
	# echo "g = $g"
	# echo "b = $b"

	minc=$b
	if fCond "$r < $g" ; then
		if fCond "$r < $b" ; then
			minc=$r
		fi
	else
		if fCond "$g < $b" ; then
			minc=$g
		fi
	fi

	# debug
	# echo "minc = $minc"

	maxc=$b
	if fCond "$r > $g" ; then
		if fCond "$r > $b" ; then
			maxc=$r
		fi
	else
		if fCond "$g > $b" ; then
			maxc=$g
		fi
	fi

	# debug
	# echo "maxc = $maxc"

	_bri=$maxc
	if [ $minc = $maxc ] ; then
		_hue=0
		_sat=0
	else
		_sat=$(fEval "($maxc - $minc) / $maxc")
		rrrc=$(fEval "($maxc - $r) / ($maxc - $minc)")
		gggc=$(fEval "($maxc - $g) / ($maxc - $minc)")
		bbbc=$(fEval "($maxc - $b) / ($maxc - $minc)")
		if [ "$r" = "$maxc" ] ; then
			_hue=$(fEval "$bbbc - $gggc")

			# debug
			# echo "_hue = $_hue"
		elif [ "$g" = "$maxc" ] ; then
			_hue=$(fEval "2.0 + $rrrc - $bbbc")

			# debug
			# echo "_hue = $_hue"
		else
			_hue=$(fEval "4.0 + $gggc - $rrrc")

			# debug
			# echo "_hue = $_hue"
		fi
		_hue=$(fEval "$_hue / 6.0")

		# debug
		# echo "_hue = $_hue"
	fi

	set -f # turn off pathname expansion: *
	fScale="scale=0;"
	_hue=$(fEval "$_hue * 65535")
	_hue=$(echo "$_hue" | cut -f 1 -d.)
	_bri=$(fEval "$_bri * 255")
	_bri=$(echo "$_bri" | cut -f 1 -d.)
	_sat=$(fEval "$_sat * 255")
	_sat=$(echo "$_sat" | cut -f 1 -d.)
	set +f
}

lampeZenityColor() {
	zColor=$(zenity --color-selection --show-palette 2> /dev/null)
	rr=$(echo "$zColor" | cut -b 2-3)
	gg=$(echo "$zColor" | cut -b 6-7)
	bb=$(echo "$zColor" | cut -b 10-11)

	# convert from hex to dec
	rr=$((16#$rr))
	gg=$((16#$gg))
	bb=$((16#$bb))
	rgbToHSB $rr $gg $bb
	
	# debug
	# echo $zColor
	# echo "rr = $rr"
	# echo "gg = $gg"
	# echo "bb = $bb"
	# echo "hue = $_hue"
	# echo "bri = $_bri"
	# echo "sat = $_sat"

	if [ $_hue -lt 0 ] ; then
		_hue=$((_hue+65535)) # rotate hue
	fi
	_COLOR[$1]=$_hue
	if [ $_bri -gt 254 ] ; then
		_bri=254
	fi
	_BRIGHTNESS[$1]=$_bri
	_SAT[$1]=$_sat
}

# try to detect the first Hue Bridge in the LAN (ipv4 class-C networks only, can detect only one bridge)
hbDetect() {
	_BRIDGE_FOUND=false
	
	# XXX   bug#4: bridge discovery uses wrong subnet
	tmpIPsFile="/tmp/lampe$$.tmp"
	L_ips=$(ip -f inet addr show | grep "/24" | sed -r "s/inet //" | cut -f 1-4 -d. | cut -f 1 -d"/")
	for L_ip in $L_ips ; do 
		# debug
		# echo " L_ip = '$L_ip'"
		
		ipByte4=$(echo $L_ip | cut -f 4 -d.)
		currentIpByte4=$ipByte4
		ipBytes13=$(echo $L_ip | cut -f 1-3 -d.)
		
		# debug
		# echo "ipByte4 = '$ipByte4', ipBytes13 = '$ipBytes13'"
		
		# ping the whole subnet in parallel and write ip-adresses to a file
		subnet="$ipBytes13."
		( for addr in `seq 1 1 254 `; do ( ping -c 1 -t 3 $subnet$addr > /dev/null && echo $subnet$addr >> "$tmpIPsFile" ) & done ) > /dev/null 
	done
	
	# debug
	# cat $tmpIPsFile
	
	# check for model description
	while read nextIP ; do
		# debug
		# echo "nextIP = $nextIP"
		
		ownIP="$subnet$currentIpByte4"
		if [ $nextIP != $ownIP ] ; then
			hbDescription=$(curl -D -X http://$nextIP/description.xml -m 3 2> /dev/null)
			hbModel=$(echo $hbDescription | grep "<modelDescription>Philips hue Personal Wireless Lighting</modelDescription>")
		
			# debug
			# echo "hbDescription (response) = '$hbDescription'"
			# echo "hbModel = '$hbModel'"
		
			if [ -n "$hbModel" ] ; then
				_BRIDGE_FOUND=true
				bridgeip=$nextIP
				echo "    bridge found at '$nextIP'"
				break
			fi	
		fi
	done < $tmpIPsFile
	rm $tmpIPsFile
}

# this function will be called, if the configuration is valid
startLampe() {
	if [ "$1" = "-z" ] ; then
		# open zenity dialog to select color and quit
		_SELECTED_LAMP=$2
		lampeZenityColor $2
		hbSendLampState
	else
		# default: interactive-mode
		lampeMain
	fi
}

# check for first start (configuration)
if [ -f ~/.lamperc ] ; then
	# read configuration
	source ~/.lamperc

	startLampe
else
	
	echo " $(lColor ltyellow)?$(lColor off) [======--$(lColor ltwhite)LAMPE$(lColor off)-------------------------------------]"
	echo "    You are running 'lampe' for the first time. Do you "
	echo -n "    wish automatic discovery and configuration? [y/n] "
	read doIt
	if [ "$doIt" == "y" ] || [ "$doIt" == "Y" ] ; then
		hbDetect
	fi
		# TODO  else: give option to enter bridge-IP manually
	
	if [ "$_BRIDGE_FOUND" == true ] ; then
		# store configuration
		echo "bridgeip=\"$bridgeip\"" > ~/.lamperc

		# TODO  register user at bridge
		
		startLampe
	else
		echo " $(lColor ltred)!$(lColor off)  no bridge found, error 2"
		exit 2
	fi
fi

