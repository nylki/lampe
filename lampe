#!/bin/bash
# by Andre Klausnitzer (poinck)

bridgeip="192.168.2.172"

readKey() {
    # Wait for first char
    if read -s -n 1 _KEY; then
      	# Read rest of chars
      	while read -s -N 1 -t 0.001 ; do # FIXME is there a timeout-problem? 
      		_KEY+="${REPLY}"
      	done
    fi
}

declare _SELECTED_LAMP=1 # defaults to first lamp
declare _LAST_LAMP=51

readAKey() {
	# readKey
	read -s -n 1 _KEY

	# XXX   catch cursor keys without modifiers (removed)
	# catch WASD for basic stuff
	case $_KEY in
		# $'\e[A' |
		"w")
			_UP=1
		;;
		# $'\e[B' |
		"s")
			_DOWN=1
		;;
		# $'\e[C' |
		"d")
			_RIGHT=1
		;;
		# $'\e[D' |
		"a")
			_LEFT=1
		;;
		"q")
			# hue
			_Q=1
		;;
		"e")
			# hue
			_E=1
		;;
		"h")
			# help
			_H=1
		;;
		[1-9])
			# select the current lamp
			_SELECTED_LAMP=$_KEY
			_NEW_LAMP=$_KEY
		;;
	esac
}

# init brightness
declare -a _BRIGHTNESS
for (( b=1 ; b<10 ; b=b+1 )) ; do 
	_BRIGHTNESS[$b]=32
done

# init saturation
declare -a _SAT
for (( s=1 ; s<10 ; s=s+1 )) ; do 
	_SAT[$s]=192
done

# init switch
declare -a _SWITCH # on or off
for (( s=1 ; s<10 ; s=s+1 )) ; do 
	_SWITCH[$s]="true"
done

# init color
declare -a _COLOR 
for (( s=1 ; s<10 ; s=s+1 )) ; do 
	_COLOR[$s]=12000 # orange
done

setBrightness() {
	brightness=${_BRIGHTNESS[$_SELECTED_LAMP]}
	
	brightness=$((brightness+$1))
	if [ $brightness -lt 1 ] ; then
		# switch off lamp
		setSwitch 0
		brightness=0
	elif [ $brightness -gt 0 ] ; then
		# switch on lamp
		setSwitch 1
		if [ $brightness -gt 254 ] ; then
			brightness=254
		fi
	fi

	_BRIGHTNESS[$_SELECTED_LAMP]=$brightness

	# debug
	# echo -n "param = $1 "
	# echo "brightness = ${_BRIGHTNESS[$_SELECTED_LAMP]} "
} 

setSat() {
	sat=${_SAT[$_SELECTED_LAMP]}
	
	sat=$((sat+$1))
	if [ $sat -lt 1 ] ; then
		sat=1
	elif [ $sat -gt 254 ] ; then
		sat=254
	fi

	_SAT[$_SELECTED_LAMP]=$sat
}

setColor() {
	hue=${_COLOR[$_SELECTED_LAMP]}
	
	hue=$((hue+$1))
	if [ $hue -lt 1 ] ; then
		hue=1
	elif [ $hue -gt 65280 ] ; then
		hue=65279
	fi

	# debug
	# echo " $hue "

	_COLOR[$_SELECTED_LAMP]=$hue
} 

setSwitch() {
	# debug
	# echo -n $1

	if [ "$1" == 1 ] ; then 
		_SWITCH[$_SELECTED_LAMP]="true"
	else
		_SWITCH[$_SELECTED_LAMP]="false"
	fi
}

# get colorEscapes from colors
lColor() {
	case $1 in
		"red")
			echo -en "\e[0;31m"
		;;
		"yellow")
			echo -en "\e[0;33m"
		;;
		"green")
			echo -en "\e[0;32m"
		;;
		"blue")
			echo -en "\e[0;34m"
		;;
		"magenta")
			echo -en "\e[0;35m"
		;;
		"white")
			echo -en "\e[0;37m"
		;;
		"ltred")
			echo -en "\e[1;31m"
		;;
		"ltyellow")
			echo -en "\e[1;33m"
		;;
		"ltgreen")
			echo -en "\e[1;32m"
		;;
		"ltblue")
			echo -en "\e[1;34m"
		;;
		"ltmagenta")
			echo -en "\e[1;35m"
		;;
		"ltwhite")
			echo -en "\e[1;37m"
		;;
		"off")
			echo -en "\e[0m"
		;;
	esac
}

getColorByValue() {
	hue=$1

	if [ $hue -lt 9001 ] ; then
		# red
		colorEscape="red"
	elif [ $hue -gt 9000 ] && [ $hue -lt 19001 ] ; then
		# orange, yellow
		colorEscape="yellow"
	elif [ $hue -gt 19000 ] && [ $hue -lt 31001 ] ; then
		# green
		colorEscape="green"
	elif [ $hue -gt 31000 ] && [ $hue -lt 35001 ] ; then
		# white, green-blue
		colorEscape="white"
	elif [ $hue -gt 35000 ] && [ $hue -lt 48001 ] ; then
		# blue
		colorEscape="blue"
	elif [ $hue -gt 48000 ] && [ $hue -lt 63279 ] ; then
		# purple
		colorEscape="magenta"
	elif [ $hue -gt 63279 ] ; then
		# red
		colorEscape="red"
	fi
	echo -en "$(lColor $colorEscape)"
}

getColor() {
	# TODO  try to reuse getColorByValue()
	hue=${_COLOR[$_SELECTED_LAMP]}

	bold=""
	if [ ${_SWITCH[$_SELECTED_LAMP]} = "true" ] ; then
		bold="lt"
	fi
	if [ $hue -lt 9001 ] ; then
		# red
		colorEscape="red"
	elif [ $hue -gt 9000 ] && [ $hue -lt 19001 ] ; then
		# orange, yellow
		colorEscape="yellow"
	elif [ $hue -gt 19000 ] && [ $hue -lt 31001 ] ; then
		# green
		colorEscape="green"
	elif [ $hue -gt 31000 ] && [ $hue -lt 35001 ] ; then
		# white, green-blue
		colorEscape="white"
	elif [ $hue -gt 35000 ] && [ $hue -lt 48001 ] ; then
		# blue
		colorEscape="blue"
	elif [ $hue -gt 48000 ] && [ $hue -lt 63279 ] ; then
		# purple
		colorEscape="magenta"
	elif [ $hue -gt 63279 ] ; then
		# red
		colorEscape="red"
	fi
	echo -en "$(lColor $bold$colorEscape)"
}

printMainScreen() {
	currentBrightness=$((_BRIGHTNESS[_SELECTED_LAMP]/5))
	currentSat=$((_SAT[_SELECTED_LAMP]*currentBrightness/254))
	colorPosition=$((_COLOR[_SELECTED_LAMP]*currentBrightness/65279))
	if [ $colorPosition -gt 49 ] ; then
		colorPosition=49
	fi

	# debug
	# echo "$colorPosition"

	echo -en "    \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b"
	echo -en " $(getColor)$_SELECTED_LAMP $(lColor ltwhite)[$(lColor off)"
	for (( ii=0 ; ii<currentBrightness ; ii=ii+1 )) ; do 
		colorValue=$((65279*ii/currentBrightness))
		echo -en "$(getColorByValue $colorValue)"

		if [ $ii -lt $currentSat ] ; then
			if [ $ii == $colorPosition ] ; then
				echo -en "$(getColor)o$(lColor off)"
			else
				echo -n "="
			fi
		else
			if [ $ii == $colorPosition ] ; then
				echo -en "$(getColor)o$(lColor off)"
			else
				echo -n "-"
			fi
		fi
	done
	for (( ii=0 ; ii<50-currentBrightness ; ii=ii+1 )) ; do
		echo -n " "
	done
	echo -en "$(lColor ltwhite)]$(lColor off) "
	if [ ${_SWITCH[$_SELECTED_LAMP]} != "true" ] ; then
		echo -n "off "
	else
		echo -n "    "
	fi
}

toggleSwitch() {
	if [ ${_SWITCH[$_SELECTED_LAMP]} = "true" ] ; then
		setSwitch 0
	else 
		setSwitch 1
	fi
}

lastTime=$(date +%s%3N) # seconds + milliseconds

# initial screen
echo -en "   [$(lColor red)=$(lColor yellow)=$(lColor green)=$(lColor white)=$(lColor blue)=$(lColor magenta)=$(lColor ltwhite)--PRESS-h-FOR-HELP--------------------------$(lColor off)]"

printHelpScreen() {
	echo ""
	echo "      w,s   BRIGHTNESS   -"
	echo "      a,d   SATURATION   ="
	echo "      q,e   COLOR        o"
	echo "      1..9  LAMP"
}

while true; do
	# main loop

	# initialize global keys
	_UP=0
	_DOWN=0
	_RIGHT=0
	_LEFT=0
	_NEW_LAMP=51;
	_Q=0
	_E=0
	_H=0

	readAKey

	# handle brightness and saturation
	if [ $_UP == 1 ] ; then
		setBrightness 5
	fi
	if [ $_DOWN == 1 ] ; then
		setBrightness -5
	fi
	if [ $_RIGHT == 1 ] ; then
		setSat 10
	fi
	if [ $_LEFT == 1 ] ; then
		setSat -10
	fi
	if [ $_Q == 1 ] ; then
		# hue
		setColor -1000
	fi
	if [ $_E == 1 ] ; then
		# hue
		setColor 1000
	fi
	if [ $_H == 1 ] ; then
		printHelpScreen
	fi

	# toggle switch
	if [ $_NEW_LAMP -lt 51 ] ; then
		# debug
		# echo "NL$_NEW_LAMP LL$_LAST_LAMP "

		if [ $_LAST_LAMP == $_NEW_LAMP ] ; then
			toggleSwitch
			toggle=1
		else
			toggle=0
		fi
		_LAST_LAMP=$_NEW_LAMP
	else
		_LAST_LAMP=51
		toggle=0
	fi

	if [ ${_SAT[$_SELECTED_LAMP]} -lt 1 ] ; then
		_SAT[$_SELECTED_LAMP]=1
	fi
	color="\"hue\":${_COLOR[$_SELECTED_LAMP]},\"bri\":${_BRIGHTNESS[$_SELECTED_LAMP]},\"sat\":${_SAT[$_SELECTED_LAMP]}"

	printMainScreen
	
	# send to hue bridge
	thisTime=$(date +%s%3N)
	diffTime=$((thisTime-lastTime))
	if [ $diffTime -gt 250 ] || [ $toggle == 1 ] ; then
		curl -s -d "{\"on\":${_SWITCH[$_SELECTED_LAMP]},$color}" -X PUT "http://$bridgeip/api/newdeveloper/lights/$_SELECTED_LAMP/state" -m 1 > /dev/null
		lastTime=$(date +%s%3N)
	fi
	
done

