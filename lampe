#!/bin/bash
# lampe by Andr√© Klausnitzer, CC0
# interactive bash script to control your Philips Hue lights

version="1.1.4"

# XXX   not used
readKey() {
    # Wait for first char
    if read -s -n 1 _KEY; then
      	# Read rest of chars
      	while read -s -N 1 -t 0.001 ; do
      		_KEY+="${REPLY}"
      	done
    fi
}

# defaults: can be redefined in ~/.lamperc
declare _SELECTED_LAMP=1
tmdCsvFile="$HOME/public_html/tm/tm_720.csv"

checkKey() {
	case $1 in
		# $'\e[A' |
		"w")
			_UP=1
		;;
		# $'\e[B' |
		"s")
			_DOWN=1
		;;
		# $'\e[C' |
		"d")
			_RIGHT=1
		;;
		# $'\e[D' |
		"a")
			_LEFT=1
		;;
		"q")
			# hue
			_Q=1
		;;
		"e")
			# hue
			_E=1
		;;
		"y")
			# on
			_Y=1
		;;
		"n")
			# off
			_N=1
		;;
		"Y")
			# on: all lights
			_YY=1
		;;
		"N")
			# off: all lights
			_NN=1
		;;
		"h")
			# help
			_H=1
		;;
		"i")
			# info: do not send new, but receive light state
			_I=1
		;;
		"I")
			# info: receive state of all lights
			_II=1
		;;
		"r")
			# random
			_R=1
		;;
		"b")
			# blink
			_B=1
		;;
		"A")
			# alert select
			_A=1
		;;
		"Q")
			# quit
			_QQ=1
		;;
		"S")
			# save current light-setting as new user default
			_S=1
		;;
		"l")
			# load light-setting from saved user default
			_L=1
		;;
		"m")
			# mood light
			_M=1
		;;
		"t")
			# redshift sequence
			_T=1
		;;
	esac
}

readAKey() {
	# readKey
	read -s -n 1 _KEY

	case $_KEY in
		[1-9])
			# select light
			printMainScreen "$_KEY"
			_SELECTED_LAMP=$_KEY
			readLightNumber "$_KEY"
		;;
		*)
			checkKey "$_KEY"
		;;
	esac
}

readLightNumber() {
	local number=$_KEY

	# debug
	# echo "number = '$number'"

	read -s -n 1 _NEXT_KEY
	case $_NEXT_KEY in
		[0-9])
			number=$number$_NEXT_KEY
		;;
		*)
			checkKey "$_NEXT_KEY"
		;;
	esac

	_SELECTED_LAMP=$number

	# debug
	# echo "_SELECTED_LAMP = '$_SELECTED_LAMP'"
}

# init brightness
declare -a _BRIGHTNESS
for (( b=1 ; b<100 ; b=b+1 )) ; do
	_BRIGHTNESS[$b]=32
done

# init saturation
declare -a _SAT
for (( s=1 ; s<100 ; s=s+1 )) ; do
	_SAT[$s]=192
done

# init switch
declare -a _SWITCH # on or off
for (( s=1 ; s<100 ; s=s+1 )) ; do
	_SWITCH[$s]="true"
done

# init color
declare -a _COLOR
for (( s=1 ; s<100 ; s=s+1 )) ; do
	_COLOR[$s]=12000 # orange
done

# init model
declare -a _MODEL
for (( s=1 ; s<100 ; s=s+1 )) ; do
	_MODEL[$s]="\"LCT001\"" # standard Hue bulb
done

moodSequence() {
	while [[ -f "/tmp/lampeSequenceM$_SELECTED_LAMP" ]] ; do
		# tmdLine=$(cat "$tmdCsvFile" | tail -n 1 | cut -f 2-3 -d',' 2> /dev/null)
		tmdLine=$(tail -n 1 < "$tmdCsvFile" | cut -f 2-3 -d',' 2> /dev/null)
		tmdInside=$(echo "$tmdLine" | cut -f 1 -d',')
		tmdOutside=$(echo "$tmdLine" | cut -f 2 -d',')

		# debug
		# echo "tmdInside  = '$tmdInside'"
		# echo "tmdOutside = '$tmdOutside'"

		local temperatureDiff=$(( tmdOutside-tmdInside ))
		local diffFactor=1
		if [[ "$temperatureDiff" -gt 0 ]] ; then
			diffFactor=2
		fi
		local hueDiff=$(( temperatureDiff*diffFactor+25750 ))
        if [[ "$hueDiff" -lt 0 ]] ; then
            hueDiff=0
        fi

		# debug
        # echo "diffFactor      = '$diffFactor'"
		# echo "temperatureDiff = '$temperatureDiff'"
		# echo "hueDiff         = '$hueDiff'"

		local hue="\"hue\":$hueDiff,\"transitiontime\":30"
		curl -s -d "{$hue}" -X PUT "http://$bridgeip/api/lampe-bash/lights/$_SELECTED_LAMP/state" -m 1 > /dev/null

		sleep 60
	done
}

redshiftSequence() {
	while [[ -f "/tmp/lampeSequenceT$_SELECTED_LAMP" ]] ; do
        # test fake berlin
        # redshift_options="-l 52.52:13.40"

        # test fake chicago
        # redshifts_options="-l 41:-87"

        # get old color temperature
        old_mired=$( head -n 1 "/tmp/lampeSequenceT$_SELECTED_LAMP" )

        # get new color temperature
        kelvin=$( redshift -op $redshift_options 2>/dev/null | grep -e ":*K$" | cut -f 2 -d ":" | cut -b 2-5 )
        mired=$(( 1000000 / kelvin ))

        # debug
        # echo "t/R:redshift_options = $redshift_options"
        # echo "t/R:kelvin = $kelvin"
        # echo "t/R:mired ?= old_mired => $mired ?= $old_mired"

		local ct="\"ct\":$mired,\"transitiontime\":150"
		curl -s -d "{$ct}" -X PUT "http://$bridgeip/api/lampe-bash/lights/$_SELECTED_LAMP/state" -m 1 > /dev/null
        if [[ "$old_mired" -ne "$mired" ]] ; then
            echo "$mired" > "/tmp/lampeSequenceT$_SELECTED_LAMP"
            sleep 60 # 1 minute
        else
            sleep 600 # 10 minutes
        fi
    done
}

# GPN15 preview sequence
previewRandom() {
	# debug
	# echo "random called, '$LAMPE_R'"

	local on="true"
	while [[ -f "/tmp/lampeSequenceR$_SELECTED_LAMP" ]] ; do
		# debug
		# echo "do random, '$LAMPE_R'"

		local hue=$(( RANDOM*2 ))
		local color="\"hue\":$hue,\"bri\":${_BRIGHTNESS[$_SELECTED_LAMP]},\"sat\":${_SAT[$_SELECTED_LAMP]},\"transitiontime\":100"
		curl -s -d "{\"on\":$on,$color}" -X PUT "http://$bridgeip/api/lampe-bash/lights/$_SELECTED_LAMP/state" -m 1 > /dev/null

		sleep 10
	done
}

# blink preview sequence
previewBlink() {
	local on="true"
	local bri="$1"
	while [[ -f "/tmp/lampeSequenceB$_SELECTED_LAMP" ]] ; do
		curl -s -d "{\"on\":$on,\"transitiontime\":0,\"bri\":$bri}" -X PUT "http://$bridgeip/api/lampe-bash/lights/$_SELECTED_LAMP/state" -m 1 > /dev/null

		sleep 1
		if [[ "$on" == "true" ]] ; then
			on="false"
		else
			on="true"
		fi
	done
}

selectAlert() {
	curl -s -d "{\"alert\":\"select\"}" -X PUT "http://$bridgeip/api/lampe-bash/lights/$_SELECTED_LAMP/state" -m 1 > /dev/null
}

setBrightness() {
	brightness=${_BRIGHTNESS[$_SELECTED_LAMP]}

	brightness=$((brightness+$1))
	if [ $brightness -lt 2 ] ; then
		brightness=1
	elif [ $brightness -gt 0 ] ; then
		if [ $brightness -gt 254 ] ; then
			brightness=254
		fi
	fi

	_BRIGHTNESS[$_SELECTED_LAMP]=$brightness

	# debug
	# echo -n "param = $1 "
	# echo "brightness = ${_BRIGHTNESS[$_SELECTED_LAMP]} "
}

setSat() {
	sat=${_SAT[$_SELECTED_LAMP]}

	sat=$((sat+$1))
	if [ $sat -lt 1 ] ; then
		sat=1
	elif [ $sat -gt 254 ] ; then
		sat=254
	fi

	_SAT[$_SELECTED_LAMP]=$sat
}

setColor() {
	hue=${_COLOR[$_SELECTED_LAMP]}

	hue=$((hue+$1))
	if [ $hue -lt 1 ] ; then
		hue=65280
	elif [ $hue -gt 65280 ] ; then
		hue=1
	fi

	# debug
	# echo " $hue "

	_COLOR[$_SELECTED_LAMP]=$hue
}

setSwitch() {
	# debug
	# echo -n $1

	if [[ "$1" == 1 ]] ; then
		_SWITCH[$_SELECTED_LAMP]="true"
	else
		_SWITCH[$_SELECTED_LAMP]="false"

		# disable sequences that would turn the light on again
		rm "/tmp/lampeSequenceB$_SELECTED_LAMP" 2> /dev/null
		rm "/tmp/lampeSequenceR$_SELECTED_LAMP" 2> /dev/null
	fi
}

# get colorEscapes from colors
lColor() {
	case $1 in
		"red")
			echo -en "\e[0;31m"
		;;
		"yellow")
			echo -en "\e[0;33m"
		;;
		"green")
			echo -en "\e[0;32m"
		;;
		"blue")
			echo -en "\e[0;34m"
		;;
		"magenta")
			echo -en "\e[0;35m"
		;;
		"cyan")
			echo -en "\e[0;36m"
		;;
		"white")
			echo -en "\e[0;37m"
		;;
		"ltred")
			echo -en "\e[1;31m"
		;;
		"ltyellow")
			echo -en "\e[1;33m"
		;;
		"ltgreen")
			echo -en "\e[1;32m"
		;;
		"ltblue")
			echo -en "\e[1;34m"
		;;
		"ltmagenta")
			echo -en "\e[1;35m"
		;;
		"ltcyan")
			echo -en "\e[1;36m"
		;;
		"ltwhite")
			echo -en "\e[1;37m"
		;;
		"off")
			echo -en "\e[0m"
		;;
	esac
}

getColorByValue() {
	hue=$1
	if [[ ! -n "$hue" ]] ; then
		hue=12000
	fi

	if [ "$hue" -lt 9001 ] ; then
		# red
		colorEscape="red"
	elif [ "$hue" -gt 9000 ] && [ "$hue" -lt 19001 ] ; then
		# orange, yellow
		colorEscape="yellow"
	elif [ "$hue" -gt 19000 ] && [ "$hue" -lt 31001 ] ; then
		# green
		colorEscape="green"
	elif [ "$hue" -gt 31000 ] && [ "$hue" -lt 35001 ] ; then
		# white, green-blue, cyan
		colorEscape="cyan"
	elif [ "$hue" -gt 35000 ] && [ "$hue" -lt 48001 ] ; then
		# blue
		colorEscape="blue"
	elif [ "$hue" -gt 48000 ] && [ "$hue" -lt 62280 ] ; then
		# purple
		colorEscape="magenta"
	elif [ "$hue" -gt 62279 ] ; then
		# red
		colorEscape="red"
	fi
	echo -en "$(lColor $colorEscape)"
}

# get print-color of selected or given light number
getColorOfLight() {
	if [[ -n "$1" ]] ; then
		local light=$1
	else
		local light=$_SELECTED_LAMP
	fi

	hue=${_COLOR[$light]}
	if [[ ! -n "$hue" ]] ; then
		hue=12000
	fi

	# debug
	# echo " getColor.hue = '$hue'"

	bold=""
	if [[ ${_SWITCH[$light]} == "true" ]] ; then
		bold="lt"
	fi
	if [[ "$hue" -lt 9001 ]] ; then
		# red
		colorEscape="red"
	elif [[ "$hue" -gt 9000 ]] && [[ "$hue" -lt 19001 ]] ; then
		# orange, yellow
		colorEscape="yellow"
	elif [[ "$hue" -gt 19000 ]] && [[ "$hue" -lt 31001 ]] ; then
		# green
		colorEscape="green"
	elif [[ "$hue" -gt 31000 ]] && [[ "$hue" -lt 35001 ]] ; then
		# white, green-blue, cyan
		colorEscape="cyan"
	elif [[ "$hue" -gt 35000 ]] && [[ "$hue" -lt 48001 ]] ; then
		# blue
		colorEscape="blue"
	elif [[ "$hue" -gt 48000 ]] && [[ "$hue" -lt 63280 ]] ; then
		# purple
		colorEscape="magenta"
	elif [[ "$hue" -gt 63279 ]] ; then
		# red
		colorEscape="red"
	fi
	echo -en "$(lColor $bold$colorEscape)"
}

printMainScreen() {
	local firstNumer=$1

	if [[ "$L_BLIND" == 0 ]] ; then
		currentBrightness=$((_BRIGHTNESS[_SELECTED_LAMP]/5))
		currentSat=$((_SAT[_SELECTED_LAMP]*currentBrightness/254))
		colorPosition=$((_COLOR[_SELECTED_LAMP]*currentBrightness/65279))
		if [ $colorPosition -gt 1 ] ; then
			colorPosition=$((colorPosition-1))
		fi

		# debug
		# echo "$colorPosition"
		# echo "firstNumer = '$firstNumer'"

		# XXX   bug#23 fixed: use carriage return instead of deleting chars
		# one by one with backspace
		echo -en "\r"
		if [ -n "$firstNumer" ] ; then
			echo -n "$firstNumer. "
		else
			if [ "$_SELECTED_LAMP" -lt 10 ] ; then
				echo -n " "
			fi
			echo -en "$(getColorOfLight)$_SELECTED_LAMP $(lColor ltwhite)"
		fi

		echo -en "[$(lColor off)"
		for (( ii=0 ; ii<currentBrightness ; ii=ii+1 )) ; do
			colorValue=$((65279*ii/currentBrightness))
			echo -en "$(getColorByValue $colorValue)"

			if [ $ii == $colorPosition ] ; then
				if [[ -f "/tmp/lampeSequenceR$_SELECTED_LAMP" ]] ; then
					echo -en "$(getColorOfLight)R$(lColor off)"
				elif [[ -f "/tmp/lampeSequenceB$_SELECTED_LAMP" ]] ; then
					echo -en "$(getColorOfLight)B$(lColor off)"
				elif [[ -f "/tmp/lampeSequenceM$_SELECTED_LAMP" ]] ; then
					echo -en "$(getColorOfLight)M$(lColor off)"
				elif [[ -f "/tmp/lampeSequenceT$_SELECTED_LAMP" ]] ; then
					echo -en "$(getColorOfLight)T$(lColor off)"
				else
					echo -en "$(getColorOfLight)C$(lColor off)"
				fi
			else
				if [ $ii -lt $currentSat ] ; then
					echo -n "="
				else
					echo -n "-"
				fi
			fi
		done
		for (( ii=0 ; ii<50-currentBrightness ; ii=ii+1 )) ; do
			echo -n " "
		done
		echo -en "$(lColor ltwhite)]$(lColor off) "
		if [[ ${_SWITCH[$_SELECTED_LAMP]} != "true" ]] ; then
			echo -n "off "
		else
			echo -n "    "
		fi
	fi
}

toggleSequence() {
	local sequence=$1

	if [[ ! -f "/tmp/lampeSequence$sequence$_SELECTED_LAMP" ]] ; then
		# activate $sequence, deactivate others
		touch "/tmp/lampeSequence$sequence$_SELECTED_LAMP" 2> /dev/null
		if [[ "$sequence" == "R" ]] ; then
			rm "/tmp/lampeSequenceB$_SELECTED_LAMP" 2> /dev/null
			rm "/tmp/lampeSequenceM$_SELECTED_LAMP" 2> /dev/null
			rm "/tmp/lampeSequenceT$_SELECTED_LAMP" 2> /dev/null
			_SWITCH[_SELECTED_LAMP]="true"
			( previewRandom ) &
		elif [[ "$sequence" == "B" ]] ; then
			rm "/tmp/lampeSequenceR$_SELECTED_LAMP" 2> /dev/null
			rm "/tmp/lampeSequenceM$_SELECTED_LAMP" 2> /dev/null
			rm "/tmp/lampeSequenceT$_SELECTED_LAMP" 2> /dev/null
			_SWITCH[_SELECTED_LAMP]="true"
			( previewBlink "${_BRIGHTNESS[$_SELECTED_LAMP]}" ) &
		elif [[ "$sequence" == "M" ]] ; then
			rm "/tmp/lampeSequenceB$_SELECTED_LAMP" 2> /dev/null
			rm "/tmp/lampeSequenceR$_SELECTED_LAMP" 2> /dev/null
			rm "/tmp/lampeSequenceT$_SELECTED_LAMP" 2> /dev/null
			( moodSequence ) &
		elif [[ "$sequence" == "T" ]] ; then
			rm "/tmp/lampeSequenceB$_SELECTED_LAMP" 2> /dev/null
			rm "/tmp/lampeSequenceR$_SELECTED_LAMP" 2> /dev/null
			rm "/tmp/lampeSequenceM$_SELECTED_LAMP" 2> /dev/null
			( redshiftSequence ) &
		fi
	else
		# deactivate $sequence
		rm "/tmp/lampeSequence$sequence$_SELECTED_LAMP" 2> /dev/null
	fi
}

printHelpScreen() {
	echo ""
	echo "    1..99    LIGHT         confirm with any key"
	echo "    w, s     BRIGHTNESS    -"
	echo "    a, d     SATURATION    ="
	echo "    q, e     COLOR         C"
	echo "    y, Y     ON            switch (all) light/s on"
	echo "    n, N     SWITCHES      switch (all) light/s off"
	echo "    i, I     INFO          receive (all) light state/s"
	echo "    S, l     SETTINGS      save, load user defaults"
	echo "    F        FIND          find new lights (TODO)"
	echo "    r        RANDOM        R: random color sequence"
	echo "    b        BLINK         B: blinking sequence"
	echo "    A        ALERT"
	echo "    m        MOOD          M: temperature difference"
	echo "                              based color sequence"
    echo "    t        REDSHIFT      T: color temperature based"
    echo "                              on redshift"
	#        [--------------------------------------------------]
	echo "    Q        QUIT"
}

lampeQuit() {
	echo -en "\n    Do you really want to quit 'lampe'? [$(lColor ltwhite)y$(lColor off)/$(lColor ltred)n$(lColor off)] "
	read doQuit
	if [[ "$doQuit" == "y" ]] || [[ "$doQuit" == "Y" ]] || [[ "$doQuit" == "" ]] ; then
		echo " $(lColor ltgreen)!$(lColor off)  bye"

		# cleanup and quit
		rm /tmp/lampeSequence* 2> /dev/null
		# killall lampe > /dev/null
		exit 0
	fi
}

lampeMain() {
	# initial screen
	echo -en "   [$(lColor red)=$(lColor yellow)=$(lColor green)=$(lColor cyan)=$(lColor blue)=$(lColor magenta)=$(lColor ltwhite)---LAMPE-$version---PRESS-h-FOR-HELP-----------$(lColor off)]"

	lastTime=$(date +%s%3N) # seconds + milliseconds
	while true; do
		# main loop

		# initialize keys
		_UP=0
		_DOWN=0
		_RIGHT=0
		_LEFT=0
		_Q=0
		_E=0
		_Y=0
		_N=0
		_H=0
		_I=0
		_II=0
		_A=0
		_QQ=0
		_S=0
		_L=0
		_R=0
		_B=0
		_M=0
		_YY=0
		_NN=0
        _T=0

		readAKey

		# handle keys
		if [[ "$_UP" == 1 ]] ; then
			setBrightness 5
			hbSendLightBri
		elif [[ "$_DOWN" == 1 ]] ; then
			setBrightness -5
			hbSendLightBri
		elif [[ "$_RIGHT" == 1 ]] ; then
			setSat 10
			hbSendLightSat
		elif [[ "$_LEFT" == 1 ]] ; then
			setSat -10
			hbSendLightSat
		elif [[ "$_Q" == 1 ]] ; then
			# hue
			setColor -1000
			hbSendLightColor
		elif [[ "$_E" == 1 ]] ; then
			# hue
			setColor 1000
			hbSendLightColor
		elif [[ "$_Y" == 1 ]] ; then
			setSwitch 1
			hbSendLightsState
		elif [[ "$_N" == 1 ]] ; then
			setSwitch 0
			hbSendLightSwitch
		elif [[ "$_YY" == 1 ]] ; then
			_GLOBAL_SWITCH="true"
			hbSendLightSwitches
		elif [[ "$_NN" == 1 ]] ; then
			_GLOBAL_SWITCH="false"
			hbSendLightSwitches
		elif [[ "$_H" == 1 ]] ; then
			printHelpScreen
		elif [[ "$_A" == 1 ]] ; then
			selectAlert
		elif [[ "$_QQ" == 1 ]] ; then
			lampeQuit
		elif [[ "$_S" == 1 ]] ; then
			saveLightSetting
			saveAllSettings
		elif [[ "$_L" == 1 ]] ; then
			loadLightSetting
			hbSendLightsState
		elif [[ "$_R" == 1 ]] ; then
			toggleSequence "R"
		elif [[ "$_B" == 1 ]] ; then
			toggleSequence "B"
		elif [[ "$_M" == 1 ]] ; then
			toggleSequence "M"
		elif [[ "$_T" == 1 ]] ; then
			toggleSequence "T"
		elif [[ "$_I" == 1 ]] ; then
			# receive current light state
			hbReceiveLightState "$_SELECTED_LAMP"
		elif [[ "$_II" == 1 ]] ; then
			# receive all light states
			echo ""
			hbReceiveLightStates
		fi

		printMainScreen
	done
}

# send hue light state only
hbSendLightColor() {
	local color="\"hue\":${_COLOR[$_SELECTED_LAMP]}"

	local thisTime=$(date +%s%3N)
	local diffTime=$((thisTime-lastTime))
	if [ $diffTime -gt 100 ] ; then
		# only send new state every 100ms
		curl -s -d "{$color}" -X PUT "http://$bridgeip/api/lampe-bash/lights/$_SELECTED_LAMP/state" -m 1 > /dev/null
		local lastTime=$(date +%s%3N)
	fi
}

# send on,off switch state only
hbSendLightSwitch() {
	local thisTime=$(date +%s%3N)
	local diffTime=$((thisTime-lastTime))
	if [ $diffTime -gt 100 ] ; then
		# only send new state every 100ms
		curl -s -d "{\"on\":${_SWITCH[$_SELECTED_LAMP]}}" -X PUT "http://$bridgeip/api/lampe-bash/lights/$_SELECTED_LAMP/state" -m 1 > /dev/null
		local lastTime=$(date +%s%3N)
	fi
}

# send on,off switch state only (all lights)
hbSendLightSwitches() {
	local thisTime=$(date +%s%3N)
	local diffTime=$((thisTime-lastTime))
	if [ $diffTime -gt 100 ] ; then
		# only send new state every 100ms
		curl -s -d "{\"on\":${_GLOBAL_SWITCH}}" -X PUT "http://$bridgeip/api/lampe-bash/groups/0/action" -m 1 > /dev/null
		local lastTime=$(date +%s%3N)
	fi
}

# send brightness and switch light state only
hbSendLightBri() {
	local color="\"bri\":${_BRIGHTNESS[$_SELECTED_LAMP]}"

	local thisTime=$(date +%s%3N)
	local diffTime=$((thisTime-lastTime))
	if [ $diffTime -gt 100 ] ; then
		# only send new state every 100ms
		curl -s -d "{$color}" -X PUT "http://$bridgeip/api/lampe-bash/lights/$_SELECTED_LAMP/state" -m 1 > /dev/null
		local lastTime=$(date +%s%3N)
	fi
}

# send saturation light state only
hbSendLightSat() {
	local color="\"sat\":${_SAT[$_SELECTED_LAMP]}"

	local thisTime=$(date +%s%3N)
	local diffTime=$((thisTime-lastTime))
	if [ $diffTime -gt 100 ] ; then
		# only send new state every 100ms
		curl -s -d "{$color}" -X PUT "http://$bridgeip/api/lampe-bash/lights/$_SELECTED_LAMP/state" -m 1 > /dev/null
		local lastTime=$(date +%s%3N)
	fi
}

# send light state (switch and color) to Hue Bridge
hbSendLightsState() {
	# debug
	# echo -e "\n    DEBUG hbSendLightsState().modelid = ${_MODEL[$_SELECTED_LAMP]}"

	if [[ "${_MODEL[$_SELECTED_LAMP]}" == "\"ZLL Light\"" ]] || [[ "${_MODEL[$_SELECTED_LAMP]}" == "\"LWB004\"" ]] ; then
		# light models "ZLL" and LWB004 do not support hue and sat
		local color="\"bri\":${_BRIGHTNESS[$_SELECTED_LAMP]}"
	else
		local color="\"hue\":${_COLOR[$_SELECTED_LAMP]},\"bri\":${_BRIGHTNESS[$_SELECTED_LAMP]},\"sat\":${_SAT[$_SELECTED_LAMP]}"
	fi

	local thisTime=$(date +%s%3N)
	local diffTime=$((thisTime-lastTime))
	if [[ "$diffTime" -gt 100 ]] ; then
		# only send new state every 100ms
		curl -s -d "{\"on\":${_SWITCH[$_SELECTED_LAMP]},$color}" -X PUT "http://$bridgeip/api/lampe-bash/lights/$_SELECTED_LAMP/state" -m 1 > /dev/null
		local lastTime=$(date +%s%3N)
	fi
}

# XXX   not used
# evaluate floating-point expression
# taken from http://www.linuxjournal.com/content/floating-point-math-bash,
# by Mitch Frazier
fEval() {
    local stat=0
    local result=0.0
    if [[ $# -gt 0 ]]; then
        result=$(echo "$fScale $*" | bc -q 2> /dev/null)
        stat=$?
        if [[ $stat -eq 0  &&  -z "$result" ]]; then stat=1; fi
    fi

    echo "$result"
    return $stat
}

# XXX   not used
# check floating-point condition
# taken from http://www.linuxjournal.com/content/floating-point-math-bash
# by Mitch Frazier
fCond() {
    local cond=0
    if [[ $# -gt 0 ]]; then
        cond=$(echo "$*" | bc -q 2> /dev/null)
        if [[ -z "$cond" ]]; then cond=0; fi
        if [[ "$cond" != 0  &&  "$cond" != 1 ]]; then cond=0; fi
    fi
    local stat=$((cond == 0))

    return $stat
}

# checks wether there is a hue bridge at given IP
hbCheck() {
	hbDescription=$(curl "http://$1/description.xml" -m 3 2> /dev/null)
	hbModel=$(echo "$hbDescription" | grep "<modelDescription>Philips hue Personal Wireless Lighting</modelDescription>")
}

# try to detect the first Hue Bridge in the LAN (ipv4 class-C networks only, can detect only one bridge)
hbDetect() {
	_BRIDGE_FOUND=false

	# XXX   bug#4 fixed, all subnets will be searched, but discovery will stop at the first found hue-bridge
	tmpIPsFile="/tmp/lampe$$.tmp"
	L_ips=$(ip -f inet addr show | grep "/24" | sed -r "s/inet //" | cut -f 1-4 -d. | cut -f 1 -d"/")
		# TODO support subnets other than /24, maybe all that are <= /24 (for that, it is necessary to calculate the range of IPs in the subnet)
	for L_ip in $L_ips ; do
		# debug
		# echo "L_ip = '$L_ip'"

		ipByte4=$(echo "$L_ip" | cut -f 4 -d.)
		currentIpByte4=$ipByte4
		ipBytes13=$(echo "$L_ip" | cut -f 1-3 -d.)

		# debug
		# echo "ipByte4 = '$ipByte4', ipBytes13 = '$ipBytes13'"

		# ping the whole subnet in parallel and write ip-adresses to a file
		subnet="$ipBytes13."
		( for addr in $(seq 1 1 254); do ( ping -c 1 -t 3 "$subnet$addr" > /dev/null && echo "$subnet$addr" >> "$tmpIPsFile" ) & done ) > /dev/null
	done

	# debug
	# cat $tmpIPsFile

	# check for model description
	while read nextIP ; do
		# debug
		# echo "nextIP = $nextIP"

		ownIP="$subnet$currentIpByte4"
		if [[ "$nextIP" != "$ownIP" ]] ; then
			hbCheck "$nextIP"

			# debug
			# echo "hbDescription (response) = '$hbDescription'"
			# echo "hbModel = '$hbModel'"

			if [ -n "$hbModel" ] ; then
				_BRIDGE_FOUND=true
				bridgeip=$nextIP
				echo "    bridge found at '$nextIP'."
				break
			fi
		fi
	done < $tmpIPsFile
	rm $tmpIPsFile 2> /dev/null
}

hbEnterIP() {
	echo -n "    Please enter the IP of your HUE-bridge: "
	read manualIP
	hbCheck "$manualIP"
	if [ -n "$hbModel" ] ; then
		_BRIDGE_FOUND=true
		bridgeip=$manualIP
		echo "    bridge found."
	fi
}

# this function will be called, if the configuration is valid
startLampe() {
	L_BLIND=0
	if [[ "$1" == "-b" ]] || [[ "$1" == "--blind" ]] ; then
		# blind modus: do not print main screen
		L_BLIND=1
		lampeMain
	else
		# default: interactive-mode
		lampeMain
	fi
}

hbRegisterUser() {
	echo "    Please press the $(lColor ltblue)Link-button$(lColor off) on your bridge to "
	echo -n "    register a user ... "
	while true ; do
		# try user registration every two seconds
		sleep 2

		hbUser=$(curl -d "{\"devicetype\": \"lampe-$version\", \"username\": \"lampe-bash\"}" "http://$bridgeip/api" -m 2 2> /dev/null)
		success=$(echo "$hbUser" | grep "success")

		# debug
		# echo "hbUser = $hbUser"

		if [ -n "$success" ] ; then
			echo -e "\n    user registered."
			break
		fi
	done
}

showHelp() {
	echo "lampe-$version by Andr√© Klausnitzer, CC0"
	echo "    without option (interactive)"
	echo " -b, --blind"
	echo "    blind-mode (interactive)"
	echo " -h, --help"
	echo "    show this help"
}

# receive just one light state.
hbReceiveLightState() {
	local light=$1
	hbLightState=$(curl "http://$bridgeip/api/lampe-bash/lights/$light" -m 2 2> /dev/null)
	lightState=$(echo "$hbLightState" | grep "state")
	if [ -n "$lightState" ] ; then
		# debug
		# echo "lightState[$light] = '$lightState'"

		# no use of JSON.sh, so that users who cannot install JSON.sh are still able to receive the
		# state of the current light
		lightSwi=$(echo "$lightState" | sed -r "s/\"on\":/;/" | cut -f 2 -d";" | cut -f 1 -d"," )
		lightBri=$(echo "$lightState" | sed -r "s/\"bri\":/;/" | cut -f 2 -d";" | cut -f 1 -d"," )
		if [[ "${_MODEL[$_SELECTED_LAMP]}" == "\"ZLL Light\"" ]] || [[ "${_MODEL[$_SELECTED_LAMP]}" == "\"LWB004\"" ]] ; then
			# light models "ZLL" and LWB004 do not support hue and sat
			lightHue=12000
			lightSat=192
		else
			lightHue=$(echo "$lightState" | sed -r "s/\"hue\":/;/" | cut -f 2 -d";" | cut -f 1 -d"," )
			lightSat=$(echo "$lightState" | sed -r "s/\"sat\":/;/" | cut -f 2 -d";" | cut -f 1 -d"," )
		fi

		# debug
		# echo "lightSwi[$light] = '$lightSwi'"
		# echo "lightBri[$light] = '$lightBri'"
		# echo "lightHue[$light] = '$lightHue'"
		# echo "lightSat[$light] = '$lightSat'"

		_SWITCH[$light]=$lightSwi
		_BRIGHTNESS[$light]=$lightBri
		_COLOR[$light]=$lightHue
		_SAT[$light]=$lightSat
	fi
}

# receives all light states. received json will be parsed by using JSON.sh
hbReceiveLightStates() {
	local lightStates=""

	lightStates=$(curl "http://$bridgeip/api/lampe-bash/lights" -m 2 2> /dev/null)
	parsedJsonLightStates=$(echo "$lightStates" | JSON.sh -b 2> /dev/null)
	for (( light=1 ; light<51 ; light=light+1 )) ; do
		# debug
		# echo "light = $light"

		local currentPJLightStates=$(echo "$parsedJsonLightStates" | grep "\[\"$light\",")
		if [[ -n "$currentPJLightStates" ]] ; then
			lightSwi=$(echo "$currentPJLightStates" | grep "\"$light\",\"state\",\"on\"" | cut -f 2)
			# if [[ -n "$lightSwi" ]] ; then
			_SWITCH[$light]=$lightSwi

			# it is assumed that for every light that has a switch the
			# following params are availabe in the json output
			lightBri=$(echo "$currentPJLightStates" | grep "\"$light\",\"state\",\"bri\"" | cut -f 2)
			_BRIGHTNESS[$light]=$lightBri

			# if modelid is "ZLL" or "LWB004" do not support hue and sat
			modelid=$(echo "$currentPJLightStates" | grep "\"$light\",\"modelid\"" | cut -f 2)
			_MODEL[$light]=$modelid
			if [[ "$modelid" == "\"ZLL Light\"" ]] || [[ "$modelid" == "\"LWB004\"" ]] ; then
				_COLOR[$light]=12000
				_SAT[$light]=192
			else
				lightHue=$(echo "$currentPJLightStates" | grep "\"$light\",\"state\",\"hue\"" | cut -f 2)
				_COLOR[$light]=$lightHue

				lightSat=$(echo "$currentPJLightStates" | grep "\"$light\",\"state\",\"sat\"" | cut -f 2)
				_SAT[$light]=$lightSat
			fi
			lightReachable=$(echo "$currentPJLightStates" | grep "\"$light\",\"state\",\"reachable\"" | cut -f 2)
			lightName=$(echo "$currentPJLightStates" | grep "\"$light\",\"name\"" | cut -f 2)

			# output for state of all lights
			if [ "$light" -lt 10 ] ; then
				echo -n " "
			fi
			echo -en "$(getColorOfLight $light)$light $(lColor off) "
			if [[ "$lightReachable" == "true" ]] ; then
				echo -en "reachable  $(lColor ltwhite)"
			else
				echo -en "           "
			fi
			if [[ -f "/tmp/lampeSequenceR$light" ]] ; then
				echo -n "R  "
			elif [[ -f "/tmp/lampeSequenceB$light" ]] ; then
				echo -n "B  "
			elif [[ -f "/tmp/lampeSequenceM$light" ]] ; then
				echo -n "M  "
			elif [[ -f "/tmp/lampeSequenceT$light" ]] ; then
				echo -n "T  "
			else
				echo -n "C  "
			fi
			echo "$(lColor white)$lightName$(lColor off)"
		else
			# defaults
			_SWITCH[$light]="true"
			_BRIGHTNESS[$light]=32
			_COLOR[$light]=12000
			_SAT[$light]=192
		fi

		# debug
		# echo "_COLOR = ${_COLOR[$light]}"
	done
}

checkDependency() {
	which "$1" 2> /dev/null 1> /dev/null
	if [[ "$?" -gt 0 ]] ; then
		echo " $(lColor ltred)?$(lColor off)  warning, '$1' is not installed"
	fi
}

# check for dependencies
checkDependency "JSON.sh"
checkDependency "redshift"

loadLightSetting() {
	if [[ -n "${SAVED_SWITCH[$_SELECTED_LAMP]}" ]] ; then
		# it is assumed that for every light that has a saved switch state
		# there are saved values for all following params
		_SWITCH[$_SELECTED_LAMP]=${SAVED_SWITCH[$_SELECTED_LAMP]}
		_BRIGHTNESS[$_SELECTED_LAMP]=${SAVED_BRIGHTNESS[$_SELECTED_LAMP]}
		_COLOR[$_SELECTED_LAMP]=${SAVED_COLOR[$_SELECTED_LAMP]}
		_SAT[$_SELECTED_LAMP]=${SAVED_SAT[$_SELECTED_LAMP]}
	fi
}

saveLightSetting() {
	SAVED_SWITCH[$_SELECTED_LAMP]=${_SWITCH[$_SELECTED_LAMP]}
	SAVED_BRIGHTNESS[$_SELECTED_LAMP]=${_BRIGHTNESS[$_SELECTED_LAMP]}
	SAVED_COLOR[$_SELECTED_LAMP]=${_COLOR[$_SELECTED_LAMP]}
	SAVED_SAT[$_SELECTED_LAMP]=${_SAT[$_SELECTED_LAMP]}
}

saveAllSettings() {
	mkdir -p ~/.config/lampe 2> /dev/null
	echo "" > ~/.config/lampe/light-settings
	for (( light=1 ; light<51 ; light=light+1 )) ; do
		if [[ -n "${SAVED_SWITCH[$light]}" ]] ; then
			# it is assumed that for every light that has a saved switch state
			# there are saved values for all following params
			{ echo "_SWITCH[$light]=\"${SAVED_SWITCH[$light]}\"" ;
			echo "SAVED_SWITCH[$light]=\"${SAVED_SWITCH[$light]}\"" ;
			echo "_BRIGHTNESS[$light]=\"${SAVED_BRIGHTNESS[$light]}\"" ;
			echo "SAVED_BRIGHTNESS[$light]=\"${SAVED_BRIGHTNESS[$light]}\"" ;
			echo "_COLOR[$light]=\"${SAVED_COLOR[$light]}\"" ;
			echo "SAVED_COLOR[$light]=\"${SAVED_COLOR[$light]}\"" ;
			echo "_SAT[$light]=\"${SAVED_SAT[$light]}\"" ;
			echo "SAVED_SAT[$light]=\"${SAVED_SAT[$light]}\"" ; } >> ~/.config/lampe/light-settings
		fi
	done
}

if [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]] ; then
	# show help and quit
	showHelp
elif [[ -f ~/.lamperc ]] ; then
	# read configuration
	source ~/.lamperc

	# load user defaults from light-settings
	if [[ -f ~/.config/lampe/light-settings ]] ; then
		source ~/.config/lampe/light-settings
	fi

	# receive light states
	hbReceiveLightStates

	startLampe "$@"
else
	# first start: ask user what to do
	echo " $(lColor ltyellow)?$(lColor off) [======---$(lColor ltwhite)LAMPE$(lColor off)------------------------------------]"
	echo "    You are running 'lampe' for the first time. Do you "
	echo -n "    wish automatic discovery and configuration? [$(lColor ltwhite)y$(lColor off)/$(lColor ltred)n$(lColor off)] "
	read doIt
	if [[ "$doIt" == "y" ]] || [[ "$doIt" == "Y" ]] || [[ "$doIt" == "" ]] ; then
		hbDetect 2> /dev/null
		if [ "$_BRIDGE_FOUND" == false ] ; then
			echo " $(lColor ltred)?$(lColor off)  warning, unable to find bridge"
			hbEnterIP
		fi
	else
		hbEnterIP
	fi

	if [[ "$_BRIDGE_FOUND" == true ]] ; then
		# register a user at bridge
		hbRegisterUser

		# store configuration if bridge was found
		echo "bridgeip=\"$bridgeip\"" >> ~/.lamperc

		# receive light states
		hbReceiveLightStates

		startLampe "$@"
	else
		echo " $(lColor ltred)!$(lColor off)  no bridge found, error 2"
		exit 2
	fi
fi

